
Proyecto 8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000120  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007eb  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d9  00000000  00000000  000009f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000331  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001404  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000403  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  0000183b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  78:	0c 94 8e 00 	jmp	0x11c	; 0x11c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <GPIO_readButton>:

bool GPIO_readButton (void){
	bool buttonPressed = !BUTTON_PRESSED;
	///---------------------------------------------
	/// 1. If the pushbutton is PRESSED
	if ((READ_PIN(GPIO01_IN,BUTTON))==BUTTON_PRESSED)
  80:	4a 99       	sbic	0x09, 2	; 9
  82:	16 c0       	rjmp	.+44     	; 0xb0 <GPIO_readButton+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	89 ef       	ldi	r24, 0xF9	; 249
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	e1 f7       	brne	.-8      	; 0x8a <GPIO_readButton+0xa>
  92:	00 c0       	rjmp	.+0      	; 0x94 <GPIO_readButton+0x14>
  94:	00 00       	nop
		///----------------------------------------------------------------
		/// 1.1. Wait for a time to avoid the pushbutton bounce
		_delay_ms(DEBOUNCE_TIME);
		///----------------------------------------------------------------
		/// 1.2. Check if the button is NOT already PRESSED
		if (READ_PIN(GPIO01_IN,BUTTON)!=BUTTON_PRESSED)
  96:	4a 9b       	sbis	0x09, 2	; 9
  98:	0d c0       	rjmp	.+26     	; 0xb4 <GPIO_readButton+0x34>
  9a:	2f ef       	ldi	r18, 0xFF	; 255
  9c:	89 ef       	ldi	r24, 0xF9	; 249
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	21 50       	subi	r18, 0x01	; 1
  a2:	80 40       	sbci	r24, 0x00	; 0
  a4:	90 40       	sbci	r25, 0x00	; 0
  a6:	e1 f7       	brne	.-8      	; 0xa0 <GPIO_readButton+0x20>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <GPIO_readButton+0x2a>
  aa:	00 00       	nop
		{
			///----------------------------------------------------------------
			/// 1.2.1. If released, do the task: change the state of the LED
			buttonPressed = BUTTON_PRESSED;
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	08 95       	ret
#include "PORTS.h"
#include "PARAMETERS.h"
#include "MACROS.h"

bool GPIO_readButton (void){
	bool buttonPressed = !BUTTON_PRESSED;
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	08 95       	ret
  b4:	81 e0       	ldi	r24, 0x01	; 1
			/// 1.2.2 Wait for a time to avoid bouncing in pushbutton (release)
			_delay_ms(DEBOUNCE_TIME);
		}
	}
	return buttonPressed;
}
  b6:	08 95       	ret

000000b8 <main>:
#define GPIO01_IN PIND
#define BUTTON PIND2

static inline void GPIO_init(){
		//1.- Set output pins
		GPIO01_MODE |=(1<<LED_RED_MODE )|(1<<LED_GREEN_MODE );
  b8:	8a b1       	in	r24, 0x0a	; 10
  ba:	88 61       	ori	r24, 0x18	; 24
  bc:	8a b9       	out	0x0a, r24	; 10
		GPIO01_OUT |= (1<<PULL_UP);
  be:	5a 9a       	sbi	0x0b, 2	; 11
{
	bool readButton = !BUTTON_PRESSED;

	//---------  Local variables (Registers) -----------------
	/// Variables to keep the state of the FSM
	LEDStates_t currentState = STATE_LED_OFF;
  c0:	c2 e0       	ldi	r28, 0x02	; 2
			
			break;
			
			case STATE_LED_RED:
			if (readButton==BUTTON_PRESSED){
				nextState=STATE_LED_OFF;
  c2:	d2 e0       	ldi	r29, 0x02	; 2
			}
			break;
			
			case STATE_LED_GREEN:
			if (readButton==BUTTON_PRESSED){
				nextState=STATE_LED_RED;
  c4:	11 e0       	ldi	r17, 0x01	; 1
		// 2.- Transitions
		// -----------------------------------------------
		switch(currentState){
			case STATE_LED_OFF:
			if (readButton==BUTTON_PRESSED){
				nextState=STATE_LED_GREEN;
  c6:	00 e0       	ldi	r16, 0x00	; 0
	while (1)
	{
		// -----------------------------------------------
		// 1.- Event
		// -----------------------------------------------
		readButton = GPIO_readButton();
  c8:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_readButton>
		// -----------------------------------------------
		// 2.- Transitions
		// -----------------------------------------------
		switch(currentState){
  cc:	c1 30       	cpi	r28, 0x01	; 1
  ce:	51 f0       	breq	.+20     	; 0xe4 <main+0x2c>
  d0:	30 f0       	brcs	.+12     	; 0xde <main+0x26>
  d2:	c2 30       	cpi	r28, 0x02	; 2
  d4:	59 f4       	brne	.+22     	; 0xec <main+0x34>
			case STATE_LED_OFF:
			if (readButton==BUTTON_PRESSED){
  d6:	81 11       	cpse	r24, r1
  d8:	1f c0       	rjmp	.+62     	; 0x118 <main+0x60>
				nextState=STATE_LED_GREEN;
  da:	c0 2f       	mov	r28, r16
  dc:	15 c0       	rjmp	.+42     	; 0x108 <main+0x50>
			}
			break;
			
			case STATE_LED_GREEN:
			if (readButton==BUTTON_PRESSED){
				nextState=STATE_LED_RED;
  de:	c8 2f       	mov	r28, r24
  e0:	c1 27       	eor	r28, r17
  e2:	0b c0       	rjmp	.+22     	; 0xfa <main+0x42>
			}
			
			break;
			
			case STATE_LED_RED:
			if (readButton==BUTTON_PRESSED){
  e4:	81 11       	cpse	r24, r1
  e6:	0d c0       	rjmp	.+26     	; 0x102 <main+0x4a>
				nextState=STATE_LED_OFF;
  e8:	cd 2f       	mov	r28, r29
  ea:	0b c0       	rjmp	.+22     	; 0x102 <main+0x4a>
			break;
		}
		// -----------------------------------------------
		// 3. Outputs
		// -----------------------------------------------
		switch(currentState){
  ec:	c1 30       	cpi	r28, 0x01	; 1
  ee:	41 f0       	breq	.+16     	; 0x100 <main+0x48>
  f0:	18 f0       	brcs	.+6      	; 0xf8 <main+0x40>
  f2:	c2 30       	cpi	r28, 0x02	; 2
  f4:	61 f4       	brne	.+24     	; 0x10e <main+0x56>
  f6:	08 c0       	rjmp	.+16     	; 0x108 <main+0x50>
				nextState=STATE_LED_OFF;
			}
			break;
			
			default:
			nextState=STATE_LED_OFF;
  f8:	cd 2f       	mov	r28, r29
		// -----------------------------------------------
		// 3. Outputs
		// -----------------------------------------------
		switch(currentState){
			case STATE_LED_GREEN:
			SETBIT(GPIO01_OUT,LED_GREEN);
  fa:	5c 9a       	sbi	0x0b, 4	; 11
			CLEARBIT(GPIO01_OUT,LED_RED);
  fc:	5b 98       	cbi	0x0b, 3	; 11
			break;
  fe:	e4 cf       	rjmp	.-56     	; 0xc8 <main+0x10>
				nextState=STATE_LED_OFF;
			}
			break;
			
			default:
			nextState=STATE_LED_OFF;
 100:	cd 2f       	mov	r28, r29
			SETBIT(GPIO01_OUT,LED_GREEN);
			CLEARBIT(GPIO01_OUT,LED_RED);
			break;
			
			case STATE_LED_RED:
			SETBIT(GPIO01_OUT,LED_RED);
 102:	5b 9a       	sbi	0x0b, 3	; 11
			CLEARBIT(GPIO01_OUT,LED_GREEN);
 104:	5c 98       	cbi	0x0b, 4	; 11
			break;
 106:	e0 cf       	rjmp	.-64     	; 0xc8 <main+0x10>
			
			case STATE_LED_OFF:
			CLEARBIT(GPIO01_OUT,LED_GREEN);
 108:	5c 98       	cbi	0x0b, 4	; 11
			CLEARBIT(GPIO01_OUT,LED_RED);
 10a:	5b 98       	cbi	0x0b, 3	; 11
			break;
 10c:	dd cf       	rjmp	.-70     	; 0xc8 <main+0x10>
			
			default:
			CLEARBIT(GPIO01_OUT,LED_GREEN);
 10e:	5c 98       	cbi	0x0b, 4	; 11
			CLEARBIT(GPIO01_OUT,LED_RED);
 110:	5b 98       	cbi	0x0b, 3	; 11
	while (1)
	{
		// -----------------------------------------------
		// 1.- Event
		// -----------------------------------------------
		readButton = GPIO_readButton();
 112:	0e 94 40 00 	call	0x80	; 0x80 <GPIO_readButton>
 116:	df cf       	rjmp	.-66     	; 0xd6 <main+0x1e>
 118:	cd 2f       	mov	r28, r29
 11a:	f6 cf       	rjmp	.-20     	; 0x108 <main+0x50>

0000011c <_exit>:
 11c:	f8 94       	cli

0000011e <__stop_program>:
 11e:	ff cf       	rjmp	.-2      	; 0x11e <__stop_program>
