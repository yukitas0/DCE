
E2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000804  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f2  00000000  00000000  000009f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c3  00000000  00000000  000010e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000013ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a4  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ba  00000000  00000000  000017d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000188e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include "USART.h"

int main(void)
{
	
	USART0_init(UBRR_VALUE);
  80:	87 e6       	ldi	r24, 0x67	; 103
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	0e 94 51 00 	call	0xa2	; 0xa2 <USART0_init>
    /* Replace with your application code */
    while (1) 
    {
        unsigned char received_char = USART0_getchar();
  88:	0e 94 60 00 	call	0xc0	; 0xc0 <USART0_getchar>
        // Echo the character back to the sender
        USART0_putchar(received_char);
  8c:	0e 94 49 00 	call	0x92	; 0x92 <USART0_putchar>
  90:	fb cf       	rjmp	.-10     	; 0x88 <main+0x8>

00000092 <USART0_putchar>:
	while(*strPointer){
		USART0_putchar(*strPointer);
		//_delay_ms(1000);
		strPointer++;
	}
}
  92:	e0 ec       	ldi	r30, 0xC0	; 192
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	90 81       	ld	r25, Z
  98:	95 ff       	sbrs	r25, 5
  9a:	fd cf       	rjmp	.-6      	; 0x96 <USART0_putchar+0x4>
  9c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  a0:	08 95       	ret

000000a2 <USART0_init>:

void USART0_init(uint16_t valueUBBR){
	/* Configuración del USART */

	// Configuración de la velocidad de transmisión
	UBRR0H = (unsigned char) (valueUBBR >> 8);  // Configura el registro de velocidad de transmisión de alta
  a2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char) valueUBBR;  // Configura el registro de velocidad de transmisión de baja
  a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	// Habilita la recepción y la transmisión
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);  // Habilita el receptor y el transmisor
  aa:	e1 ec       	ldi	r30, 0xC1	; 193
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	88 61       	ori	r24, 0x18	; 24
  b2:	80 83       	st	Z, r24

	// Configuración del formato de trama: 8 bits de datos, 1 bit de parada
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);  // Establece el tamaño de la trama en 8 bits
  b4:	e2 ec       	ldi	r30, 0xC2	; 194
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	86 60       	ori	r24, 0x06	; 6
  bc:	80 83       	st	Z, r24
  be:	08 95       	ret

000000c0 <USART0_getchar>:
	//-----------------------------------
}

unsigned char USART0_getchar() {
	// Wait for data to be received
	while (!(UCSR0A & (1 << RXC0)));
  c0:	e0 ec       	ldi	r30, 0xC0	; 192
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 23       	and	r24, r24
  c8:	ec f7       	brge	.-6      	; 0xc4 <USART0_getchar+0x4>
	// Get and return received data from buffer
	return UDR0;
  ca:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  ce:	08 95       	ret

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
