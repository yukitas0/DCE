
E3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800100  0000013e  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008db  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000731  00000000  00000000  00000c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fb  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001668  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a6  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000db  00000000  00000000  00001aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001b7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3d       	cpi	r26, 0xDC	; 220
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "USART.h"

void MainMenu();
int main(void)
{
	USART0_init(UBRR_VALUE);
  96:	87 e6       	ldi	r24, 0x67	; 103
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 86 00 	call	0x10c	; 0x10c <USART0_init>
		}
    }
}

inline void MainMenu(){
	USART0_putString(
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	91 e0       	ldi	r25, 0x01	; 1
  a2:	0e 94 77 00 	call	0xee	; 0xee <USART0_putString>
	
    /* Replace with your application code */
    while (1) 
    {
		MainMenu();
		unsigned char opcion = USART0_getchar();
  a6:	0e 94 95 00 	call	0x12a	; 0x12a <USART0_getchar>
		switch (opcion)
  aa:	82 36       	cpi	r24, 0x62	; 98
  ac:	49 f0       	breq	.+18     	; 0xc0 <main+0x2a>
  ae:	8a 37       	cpi	r24, 0x7A	; 122
  b0:	61 f0       	breq	.+24     	; 0xca <main+0x34>
  b2:	81 36       	cpi	r24, 0x61	; 97
  b4:	79 f4       	brne	.+30     	; 0xd4 <main+0x3e>
		{
		case 'a':
			USART0_putString("Presionaste a\n\r");
  b6:	80 eb       	ldi	r24, 0xB0	; 176
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 77 00 	call	0xee	; 0xee <USART0_putString>
			break;
  be:	ef cf       	rjmp	.-34     	; 0x9e <main+0x8>
		case 'b':
			USART0_putString("Presionaste b\n\r");
  c0:	80 ec       	ldi	r24, 0xC0	; 192
  c2:	91 e0       	ldi	r25, 0x01	; 1
  c4:	0e 94 77 00 	call	0xee	; 0xee <USART0_putString>
			break;
  c8:	ea cf       	rjmp	.-44     	; 0x9e <main+0x8>
		}
    }
}

inline void MainMenu(){
	USART0_putString(
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	0e 94 77 00 	call	0xee	; 0xee <USART0_putString>
  d2:	e5 cf       	rjmp	.-54     	; 0x9e <main+0x8>
			break;
		case 'z':
			MainMenu();
			break;
		default:
			USART0_putString("Error :(\n\r");	
  d4:	80 ed       	ldi	r24, 0xD0	; 208
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	0e 94 77 00 	call	0xee	; 0xee <USART0_putString>
  dc:	e0 cf       	rjmp	.-64     	; 0x9e <main+0x8>

000000de <USART0_putchar>:
#include "USART.h"


void USART0_putchar(unsigned char data){
	//1.Polling; if UDRE0 is 0 waits
	while(!(UCSR0A & (1<<UDRE0)));
  de:	e0 ec       	ldi	r30, 0xC0	; 192
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	90 81       	ld	r25, Z
  e4:	95 ff       	sbrs	r25, 5
  e6:	fd cf       	rjmp	.-6      	; 0xe2 <USART0_putchar+0x4>
	
	//load register
	UDR0=data;
  e8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  ec:	08 95       	ret

000000ee <USART0_putString>:
}

void USART0_putString(char* strPointer){
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
	//1.
	while(*strPointer){
  f4:	88 81       	ld	r24, Y
  f6:	88 23       	and	r24, r24
  f8:	31 f0       	breq	.+12     	; 0x106 <USART0_putString+0x18>
  fa:	21 96       	adiw	r28, 0x01	; 1
		USART0_putchar(*strPointer);
  fc:	0e 94 6f 00 	call	0xde	; 0xde <USART0_putchar>
	UDR0=data;
}

void USART0_putString(char* strPointer){
	//1.
	while(*strPointer){
 100:	89 91       	ld	r24, Y+
 102:	81 11       	cpse	r24, r1
 104:	fb cf       	rjmp	.-10     	; 0xfc <USART0_putString+0xe>
		USART0_putchar(*strPointer);
		//_delay_ms(1000);
		strPointer++;
	}
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <USART0_init>:

void USART0_init(uint16_t valueUBBR){
	/* Configuración del USART */

	// Configuración de la velocidad de transmisión
	UBRR0H = (unsigned char) (valueUBBR >> 8);  // Configura el registro de velocidad de transmisión de alta
 10c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char) valueUBBR;  // Configura el registro de velocidad de transmisión de baja
 110:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	// Habilita la recepción y la transmisión
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);  // Habilita el receptor y el transmisor
 114:	e1 ec       	ldi	r30, 0xC1	; 193
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	88 61       	ori	r24, 0x18	; 24
 11c:	80 83       	st	Z, r24

	// Configuración del formato de trama: 8 bits de datos, 1 bit de parada
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);  // Establece el tamaño de la trama en 8 bits
 11e:	e2 ec       	ldi	r30, 0xC2	; 194
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	86 60       	ori	r24, 0x06	; 6
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <USART0_getchar>:
	//-----------------------------------
}

unsigned char USART0_getchar() {
	// Wait for data to be received
	while (!(UCSR0A & (1 << RXC0)));
 12a:	e0 ec       	ldi	r30, 0xC0	; 192
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	88 23       	and	r24, r24
 132:	ec f7       	brge	.-6      	; 0x12e <USART0_getchar+0x4>
	// Get and return received data from buffer
	return UDR0;
 134:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 138:	08 95       	ret

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
