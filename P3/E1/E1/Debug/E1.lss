
E1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000766  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006af  00000000  00000000  0000093e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a8  00000000  00000000  00000fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000050  00000000  00000000  00001298  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000009e  00000000  00000000  00001673  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001711  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__vector_1>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5d 00 	call	0xba	; 0xba <main>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <__vector_1>:
///-------- Interrupt Service Routines --------------------------
/// If INT0 interrupt is enabled, each time the pushbutton is
/// pressed, the int interrupt is triggered. Then all the actions
/// written into the ISR are executed. When it finishes, the flag is
/// cleared and the main program continues.
ISR(INT0_vect) {
  80:	1f 92       	push	r1
  82:	0f 92       	push	r0
  84:	0f b6       	in	r0, 0x3f	; 63
  86:	0f 92       	push	r0
  88:	11 24       	eor	r1, r1
  8a:	2f 93       	push	r18
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
	///--------------------------------------------------------
	/// 1.- Toggle the red LED
	///--------------------------------------------------------
	TOGGLEBIT (GPIO01_OUT, LED_RED); // Toggle the RED_LED
  90:	9b b1       	in	r25, 0x0b	; 11
  92:	88 e0       	ldi	r24, 0x08	; 8
  94:	89 27       	eor	r24, r25
  96:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	81 ee       	ldi	r24, 0xE1	; 225
  9c:	94 e0       	ldi	r25, 0x04	; 4
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <__vector_1+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <__vector_1+0x28>
  a8:	00 00       	nop
	//--------------------------------------------------------------------
	// 2. To avoid a new interrupt due to a falling edge caused by bouncing
	//--------------------------------------------------------------------
	_delay_ms (100); // Although is not recommended
}
  aa:	9f 91       	pop	r25
  ac:	8f 91       	pop	r24
  ae:	2f 91       	pop	r18
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <main>:
#define GPIO01_IN PIND
#define BUTTON PIND2

static inline void GPIO_init(){
		//1.- Set output pins
		GPIO01_MODE |=(1<<LED_RED_MODE )|(1<<LED_GREEN_MODE );
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	88 61       	ori	r24, 0x18	; 24
  be:	8a b9       	out	0x0a, r24	; 10
		GPIO01_OUT |= (1<<PULL_UP);
  c0:	5a 9a       	sbi	0x0b, 2	; 11
	/// -----------------------------------------------------------
	GPIO_init();
	/// -----------------------------------------------------------
	/// 2.- Configure external interrupt
	/// -----------------------------------------------------------
	EICRA = (1<<ISC01) |(0<<ISC00) | // INT0 is triggered by a falling edge
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	(0<<ISC11) |(0<<ISC10); // INT1 is set as default value (0)
	EIMSK |= (1<<INT0); // Enable the ISR of INT0;
  c8:	e8 9a       	sbi	0x1d, 0	; 29
	/// -----------------------------------------------------------
	/// 3.- Enable global interrupts
	/// -----------------------------------------------------------
	sei(); // Equivalent to SREG |=(1<<I);
  ca:	78 94       	sei
	///------------ LOOP ----------------------------------------
	while (1) {
		/// -----------------------------------------------------------
		/// 1.- Toggle the green LD
		/// -----------------------------------------------------------
		TOGGLEBIT(GPIO01_OUT, LED_GREEN);
  cc:	90 e1       	ldi	r25, 0x10	; 16
  ce:	8b b1       	in	r24, 0x0b	; 11
  d0:	89 27       	eor	r24, r25
  d2:	8b b9       	out	0x0b, r24	; 11
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	33 ed       	ldi	r19, 0xD3	; 211
  d8:	80 e3       	ldi	r24, 0x30	; 48
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	30 40       	sbci	r19, 0x00	; 0
  de:	80 40       	sbci	r24, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x20>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x2a>
  e4:	00 00       	nop
  e6:	f3 cf       	rjmp	.-26     	; 0xce <main+0x14>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
