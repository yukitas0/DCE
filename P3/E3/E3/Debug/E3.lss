
E3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000114  00000188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000114  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000078e  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006bd  00000000  00000000  000009b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c3  00000000  00000000  0000106f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039d  00000000  00000000  0000137c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000f8  00000000  00000000  00001719  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001811  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_1>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  8e:	0c 94 88 00 	jmp	0x110	; 0x110 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_1>:
#include "PARAMETERS.h"
#include "PORTS.h"

#define max_increment 4
uint8_t volatile increment = 1;
ISR(INT0_vect) {	//si ha entrado aqui es que el botton se ha pulsado
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8f e3       	ldi	r24, 0x3F	; 63
  a6:	9c e9       	ldi	r25, 0x9C	; 156
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <__vector_1+0x12>
  ac:	00 c0       	rjmp	.+0      	; 0xae <__vector_1+0x18>
  ae:	00 00       	nop
	_delay_ms (10);
	increment++;
  b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	increment=(increment % max_increment)+1;
  ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  be:	83 70       	andi	r24, 0x03	; 3
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <main>:


static inline void GPIO_init(){
		//1.- Set output pins
		//GPIO01_MODE |=(1<<LED_RED_MODE )|(1<<LED_GREEN_MODE );
		 GPIO01_OUT |= (1<<PULL_UP);
  d4:	5a 9a       	sbi	0x0b, 2	; 11
		 GPIO01_MODE |= (1 << BIT0) | (1 << BIT1) | (1 << BIT2) | (1 << BIT3); // Set PD3, PD4, PD5, PD6 as output pins
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	88 67       	ori	r24, 0x78	; 120
  da:	8a b9       	out	0x0a, r24	; 10

int main(void)
{
	GPIO_init();
	
	EICRA = (1<<ISC01) |(0<<ISC00) | // INT0 is triggered by a falling edge
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
	(0<<ISC11) |(0<<ISC10); // INT1 is set as default value (0)
	EIMSK |= (1<<INT0); // Enable the ISR of INT0;
  e2:	e8 9a       	sbi	0x1d, 0	; 29
	
	sei(); //enable global interrumps
  e4:	78 94       	sei
	uint8_t counter =0;
  e6:	80 e0       	ldi	r24, 0x00	; 0
	while (1)
	{
		//aqui debemos de mostrar con los led el numero counter
		PORTD= (0b00000100) | ((counter << 3));	//MASK 0b 0000 0111
  e8:	98 2f       	mov	r25, r24
  ea:	99 0f       	add	r25, r25
  ec:	99 0f       	add	r25, r25
  ee:	99 0f       	add	r25, r25
  f0:	94 60       	ori	r25, 0x04	; 4
  f2:	9b b9       	out	0x0b, r25	; 11
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	33 ed       	ldi	r19, 0xD3	; 211
  f8:	90 e3       	ldi	r25, 0x30	; 48
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	30 40       	sbci	r19, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x26>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x30>
 104:	00 00       	nop
		_delay_ms (1000);
		counter +=increment;
 106:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 10a:	89 0f       	add	r24, r25
		counter%=16;
 10c:	8f 70       	andi	r24, 0x0F	; 15
 10e:	ec cf       	rjmp	.-40     	; 0xe8 <main+0x14>

00000110 <_exit>:
 110:	f8 94       	cli

00000112 <__stop_program>:
 112:	ff cf       	rjmp	.-2      	; 0x112 <__stop_program>
