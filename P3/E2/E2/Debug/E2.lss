
E2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000781  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c9  00000000  00000000  000009b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a6  00000000  00000000  0000107a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00001320  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000393  00000000  00000000  00001370  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000009e  00000000  00000000  00001703  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000017a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 76 00 	call	0xec	; 0xec <main>
  88:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_1>:
#include "MACROS.h"
#include "PARAMETERS.h"
#include "PORTS.h"

uint8_t volatile counter = 0;
ISR(INT0_vect) {	//si ha entrado aqui es que el botton se ha pulsado
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	8f e3       	ldi	r24, 0x3F	; 63
  a2:	9c e9       	ldi	r25, 0x9C	; 156
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <__vector_1+0x14>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <__vector_1+0x1a>
  aa:	00 00       	nop
	_delay_ms (10);
	counter++;
  ac:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	counter=counter % 15;
  b6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  ba:	89 e8       	ldi	r24, 0x89	; 137
  bc:	28 9f       	mul	r18, r24
  be:	81 2d       	mov	r24, r1
  c0:	11 24       	eor	r1, r1
  c2:	86 95       	lsr	r24
  c4:	86 95       	lsr	r24
  c6:	86 95       	lsr	r24
  c8:	98 2f       	mov	r25, r24
  ca:	99 0f       	add	r25, r25
  cc:	89 0f       	add	r24, r25
  ce:	98 2f       	mov	r25, r24
  d0:	99 0f       	add	r25, r25
  d2:	99 0f       	add	r25, r25
  d4:	89 0f       	add	r24, r25
  d6:	28 1b       	sub	r18, r24
  d8:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	
}
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	2f 91       	pop	r18
  e2:	0f 90       	pop	r0
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	0f 90       	pop	r0
  e8:	1f 90       	pop	r1
  ea:	18 95       	reti

000000ec <main>:


static inline void GPIO_init(){
		//1.- Set output pins
		//GPIO01_MODE |=(1<<LED_RED_MODE )|(1<<LED_GREEN_MODE );
		 GPIO01_OUT |= (1<<PULL_UP);
  ec:	5a 9a       	sbi	0x0b, 2	; 11
		 GPIO01_MODE |= (1 << BIT0) | (1 << BIT1) | (1 << BIT2) | (1 << BIT3); // Set PD3, PD4, PD5, PD6 as output pins
  ee:	8a b1       	in	r24, 0x0a	; 10
  f0:	88 67       	ori	r24, 0x78	; 120
  f2:	8a b9       	out	0x0a, r24	; 10

int main(void)
{
    GPIO_init();
	
	EICRA = (1<<ISC01) |(0<<ISC00) | // INT0 is triggered by a falling edge
  f4:	82 e0       	ldi	r24, 0x02	; 2
  f6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
			(0<<ISC11) |(0<<ISC10); // INT1 is set as default value (0)
	EIMSK |= (1<<INT0); // Enable the ISR of INT0;
  fa:	e8 9a       	sbi	0x1d, 0	; 29
	
	sei(); //enable global interrumps
  fc:	78 94       	sei

    while (1) 
    {
		//aqui debemos de mostrar con los led el numero counter
		PORTD= (0b00000100) | ((counter << 3));	//MASK 0b 0000 0111
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 102:	88 0f       	add	r24, r24
 104:	88 0f       	add	r24, r24
 106:	88 0f       	add	r24, r24
 108:	84 60       	ori	r24, 0x04	; 4
 10a:	8b b9       	out	0x0b, r24	; 11
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	83 ed       	ldi	r24, 0xD3	; 211
 110:	90 e3       	ldi	r25, 0x30	; 48
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x26>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x30>
 11c:	00 00       	nop
 11e:	ef cf       	rjmp	.-34     	; 0xfe <main+0x12>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
